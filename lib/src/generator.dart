//  Copyright 2023 Google LLC
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

import 'package:path/path.dart' as path;

import 'cli.dart';
import 'model.dart';

class MdGenerator {
  final String rootDir;
  final SourceFolder sourceFolder;
  final Filter filter;
  final bool failIfChanged;
  final bool failOnCycles;
  final ExitCallback? exitFn;

  MdGenerator({
    required this.rootDir,
    required this.sourceFolder,
    required this.filter,
    required this.failIfChanged,
    required this.failOnCycles,
    this.exitFn,
  });

  Future<int> generateFiles() async {
    return await _generateRecursive(sourceFolder);
  }

  /// Recursively generates md files in source folders.
  ///
  /// Returns number of generated files.
  Future<int> _generateRecursive(SourceFolder folder) async {
    var result = 0;
    final generated = await maybeGenerateDiagram(
      filter.shouldGenerateFile(folder),
      folder,
    );
    if (generated) result++;

    for (final node in folder.children.values) {
      if (node is SourceFolder) result += await _generateRecursive(node);
    }

    return result;
  }

  Future<bool> maybeGenerateDiagram(
    bool included,
    SourceFolder folder,
  ) async {
    final filePath = path.joinAll([rootDir, folder.fullName, 'DEPS.md']);

    if (!included) {
      await deleteDiagramFile(path: filePath, failIfExists: failIfChanged);
      return false;
    }

    _handleCycles(
      failOnCycles: failOnCycles,
      totalInversions: folder.localInversions,
    );

    final theContent = content(folder);
    if (theContent == null) {
      await deleteDiagramFile(path: filePath, failIfExists: failIfChanged);
      return false;
    }

    await updateDiagramFile(filePath, theContent, failIfChanged);
    return true;
  }

  static String? content(SourceFolder folder) {
    final items = <String>[];
    for (final consumer in folder.children.values) {
      for (final dependency in consumer.siblingDependencies) {
        final inversion = isInversion(consumer, dependency);
        final arrow = inversion ? '--!-->' : '-->';
        items.add('${consumer.shortName}$arrow${dependency.shortName};');
      }
    }

    if (items.isEmpty) return null;

    items.sort();
    final result = StringBuffer();

    result.writeln('<!---');
    result.writeln('Generated by https://github.com/polina-c/layerlens');
    result.writeln(
      'Dependencies that create loops (inversions) are marked with `!`.',
    );
    result.writeln('-->');
    result.writeln('');
    result.writeln('```mermaid');
    result.writeln('flowchart TD;');
    result.writeln(items.join('\n'));
    result.writeln('```');

    if (folder.localInversions == 0) {
      return result.toString();
    }

    result.writeln('');
    result.writeln('### Inversions');
    result.writeln('');
    result.writeln(
      'In this folder: ${folder.localInversions}',
    );
    result.writeln('');
    result.writeln(
      'Including sub-folders: ${folder.totalInversions}',
    );

    return result.toString();
  }

  void _handleCycles({
    required bool failOnCycles,
    required int totalInversions,
  }) {
    if (totalInversions > 0 && failOnCycles) {
      failExecution(FailureCodes.cycles, exitFn: exitFn);
    }
  }
}
